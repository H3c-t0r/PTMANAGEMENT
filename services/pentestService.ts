import { Pentest, CreatePentestRequest, SubmitReportRequest, DashboardStats, ApiResponse } from '@/models';
import { apiClient } from './apiClient';

export const pentestService = {
  async getPentestsByUser(userId: string): Promise<Pentest[]> {
    const response = await apiClient.get<ApiResponse<Pentest[]>>(`/pentests/user/${userId}`);
    
    if (!response.data.success || !response.data.data) {
      throw new Error('Failed to fetch pentests');
    }

    return response.data.data;
  },

  async createPentest(request: CreatePentestRequest): Promise<Pentest> {
    const response = await apiClient.post<ApiResponse<Pentest>>('/pentests', request);
    
    if (!response.data.success || !response.data.data) {
      throw new Error(response.data.error || 'Failed to create pentest');
    }

    return response.data.data;
  },

  async submitReport(request: SubmitReportRequest): Promise<void> {
    const response = await apiClient.post<ApiResponse<void>>('/pentests/report', request);
    
    if (!response.data.success) {
      throw new Error(response.data.error || 'Failed to submit report');
    }
  },

  async getPentestStats(pentesterId?: string, statusFilter?: string): Promise<DashboardStats> {
    const params = new URLSearchParams();
    if (pentesterId && pentesterId !== 'all') params.append('pentesterId', pentesterId);
    if (statusFilter && statusFilter !== 'all') params.append('status', statusFilter);
    
    const response = await apiClient.get<ApiResponse<DashboardStats>>(`/pentests/stats?${params}`);
    
    if (!response.data.success || !response.data.data) {
      throw new Error('Failed to fetch pentest stats');
    }

    return response.data.data;
  },

  async updatePentestStatus(pentestId: string, status: string): Promise<void> {
    const response = await apiClient.put<ApiResponse<void>>(`/pentests/${pentestId}/status`, { status });
    
    if (!response.data.success) {
      throw new Error(response.data.error || 'Failed to update pentest status');
    }
  }
};