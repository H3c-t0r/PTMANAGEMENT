'use client';

import { useState } from 'react';
import { User } from '@/models';
import { pentestService } from '@/services/pentestService';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { validateTextLength, validateDateRange } from '@/utils/validation';
import { useToast } from '@/hooks/use-toast';

interface AssignPentestModalProps {
  isOpen: boolean;
  onClose: () => void;
  pentesters: User[];
}

const pentestTypes = [
  'API',
  'Mobile',
  'Infrastructure',
  'Web',
  'Thick Client'
] as const;

const progressStatuses = [
  'planned',
  'in_progress'
] as const;

export function AssignPentestModal({ isOpen, onClose, pentesters }: AssignPentestModalProps) {
  const [projectName, setProjectName] = useState('');
  const [selectedPentester, setSelectedPentester] = useState('');
  const [pentestType, setPentestType] = useState('');
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  const [status, setStatus] = useState<'planned' | 'in_progress'>('planned');
  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});
  
  const { toast } = useToast();

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    if (!projectName || !validateTextLength(projectName, 100)) {
      newErrors.projectName = 'Please enter a project name (maximum 100 characters)';
    }

    if (!selectedPentester) {
      newErrors.pentester = 'Please select a pentester';
    }

    if (!pentestType) {
      newErrors.type = 'Please select a pentest type';
    }

    if (!startDate) {
      newErrors.startDate = 'Please select a start date';
    }

    if (!endDate) {
      newErrors.endDate = 'Please select an end date';
    }

    if (startDate && endDate && !validateDateRange(new Date(startDate), new Date(endDate))) {
      newErrors.endDate = 'End date must be after start date';
    }

    // Prevent scheduling on weekends
    if (startDate) {
      const start = new Date(startDate);
      if (start.getDay() === 0 || start.getDay() === 6) {
        newErrors.startDate = 'Pentests cannot start on weekends';
      }
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    setLoading(true);
    
    try {
      await pentestService.createPentest({
        projectName,
        type: pentestType as any,
        assignedTo: selectedPentester,
        startDate,
        endDate,
        status
      });

      toast({
        title: "Pentest Assigned",
        description: `${projectName} has been assigned to ${pentesters.find(p => p.id === selectedPentester)?.name}`,
      });

      // Reset form
      setProjectName('');
      setSelectedPentester('');
      setPentestType('');
      setStartDate('');
      setEndDate('');
      setStatus('planned');
      setErrors({});
      
      onClose();
    } catch (error) {
      toast({
        title: "Assignment Failed",
        description: error instanceof Error ? error.message : 'Failed to assign pentest',
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle>Assign Pentest</DialogTitle>
          <DialogDescription>
            Create and assign a new penetration testing project
          </DialogDescription>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-4">
          {Object.keys(errors).length > 0 && (
            <Alert className="border-destructive">
              <AlertDescription className="text-destructive">
                Please fix the errors below before submitting.
              </AlertDescription>
            </Alert>
          )}

          <div className="space-y-2">
            <Label htmlFor="projectName">Project Name</Label>
            <Input
              id="projectName"
              placeholder="Enter project name"
              value={projectName}
              onChange={(e) => setProjectName(e.target.value)}
              className={errors.projectName ? 'border-red-500' : ''}
            />
            {errors.projectName && (
              <p className="text-sm text-red-500">{errors.projectName}</p>
            )}
          </div>

          <div className="space-y-2">
            <Label htmlFor="pentester">Assign to Pentester</Label>
            <Select value={selectedPentester} onValueChange={setSelectedPentester}>
              <SelectTrigger className={errors.pentester ? 'border-red-500' : ''}>
                <SelectValue placeholder="Select pentester" />
              </SelectTrigger>
              <SelectContent>
                {pentesters.map((pentester) => (
                  <SelectItem key={pentester.id} value={pentester.id}>
                    {pentester.name} ({pentester.email})
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            {errors.pentester && (
              <p className="text-sm text-red-500">{errors.pentester}</p>
            )}
          </div>

          <div className="space-y-2">
            <Label htmlFor="pentestType">Pentest Type</Label>
            <Select value={pentestType} onValueChange={setPentestType}>
              <SelectTrigger className={errors.type ? 'border-red-500' : ''}>
                <SelectValue placeholder="Select pentest type" />
              </SelectTrigger>
              <SelectContent>
                {pentestTypes.map((type) => (
                  <SelectItem key={type} value={type}>
                    {type}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            {errors.type && (
              <p className="text-sm text-red-500">{errors.type}</p>
            )}
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="startDate">Start Date</Label>
              <Input
                id="startDate"
                type="date"
                value={startDate}
                onChange={(e) => setStartDate(e.target.value)}
                className={errors.startDate ? 'border-red-500' : ''}
                min={new Date().toISOString().split('T')[0]}
              />
              {errors.startDate && (
                <p className="text-sm text-red-500">{errors.startDate}</p>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="endDate">End Date</Label>
              <Input
                id="endDate"
                type="date"
                value={endDate}
                onChange={(e) => setEndDate(e.target.value)}
                className={errors.endDate ? 'border-red-500' : ''}
                min={startDate || new Date().toISOString().split('T')[0]}
              />
              {errors.endDate && (
                <p className="text-sm text-red-500">{errors.endDate}</p>
              )}
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="status">Progress Status</Label>
            <Select value={status} onValueChange={(value) => setStatus(value as any)}>
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="planned">Planned</SelectItem>
                <SelectItem value="in_progress">In Progress</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </form>

        <DialogFooter>
          <Button type="button" variant="outline" onClick={onClose}>
            Cancel
          </Button>
          <Button type="submit" onClick={handleSubmit} disabled={loading}>
            {loading ? 'Assigning...' : 'Assign Pentest'}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}